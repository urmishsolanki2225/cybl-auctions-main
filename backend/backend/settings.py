"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

from celery.schedules import crontab

# USE_TZ = True
# TIME_ZONE = 'UTC'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mml^qnm8vb+wzv(4m+m+4y6key_-btr5)xe_&*4lua97lj$(-r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'adminpanel',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_summernote',
    'api',
    'channels',
    'rest_framework_simplejwt.token_blacklist',
    'social_django',
]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# Google OAuth2 settings
GOOGLE_CLIENT_ID = "1087829592235-sm0nbsei6bl5jnvrgft26l8ide3sjgbm.apps.googleusercontent.com"
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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' #'your-google-client-secret'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

# cors settings
CORS_ALLOWED_ORIGINS = [
    # "http://192.168.2.103:8000",
    # "http://192.168.2.103:8000",
    # "http://192.168.2.103:5173",
    # "http://localhost:5173",
    # "http://127.0.0.1:8000",
    # "http://192.168.98.35:5173",
    # "http://192.168.98.35:8000",
    "http://localhost:5173",
    "http://192.168.2.108:5173",
    "http://192.168.2.108:8000",
    "http://192.168.201.35:5173",
    "http://192.168.201.35:8000",
    "http://192.168.2.108:5173",
    "http://192.168.2.108:8000",

]

CORS_ALLOW_CREDENTIALS = True


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # or 15
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "AUTH_HEADER_TYPES": ("Bearer",),
}


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # Add your template directories here
            BASE_DIR / 'templates',  # If you have a project-level templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
BASE_CNF = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "OPTIONS": {
            "read_default_file": os.path.join(BASE_CNF, "my.cnf"),
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

AUTHENTICATION_BACKENDS = [
    'adminpanel.authentication.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

PASSWORD_RESET_TIMEOUT = 120  # 2 minutes, in seconds


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'



CELERY_BROKER_URL = 'redis://localhost:6379/0'


# In your settings.py or celery.py file


CELERY_BEAT_SCHEDULE = {
    # Main auction management - every 5 seconds (more reasonable)
    'update_auction_status_every_5_seconds': {
        'task': 'adminpanel.tasks.update_auction_status',
        'schedule': 1.0,  # Every 5 seconds
    },
    
    # Auto-extend check - every 2 seconds for responsiveness
    # 'check_lot_auto_extend_every_2_seconds': {
    #     'task': 'adminpanel.tasks.check_lot_auto_extend',
    #     'schedule': 1.0,  # Every 2 seconds
    # },
    
    # Backup expired lots processor - every 10 seconds
    'process_expired_lots_every_10_seconds': {
        'task': 'adminpanel.tasks.process_expired_lots',
        'schedule': 1.0,  # Every 10 seconds
    },
    
    # Cleanup old auctions - once daily at 2 AM
    'cleanup_expired_auctions_daily': {
        'task': 'adminpanel.tasks.cleanup_expired_auctions',
        'schedule': crontab(hour=2, minute=0),  # Daily at 2:00 AM
    },
}



# Channel Layers (Add this to settings.py)
# settings.py
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 6379)],
        },
    },
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'api.consumers': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}